{"ast":null,"code":"/* 4️⃣ ***REDUCER*** 4️⃣ */\n\n/* Importa las action-types aquí. */\n\nimport { GET_ALL_FUTBOLISTAS, GET_FUTBOLISTAS_DETAIL, CREATE_FUTBOLISTA, DELETE_FUTBOLISTA } from '../actions/index';\nconst initialState = {\n  futbolistas: [],\n  futbolistaDetail: {}\n};\n\n/*\r\nEn este ejercicio tendrás que crear los casos de un reducer para gestionar la información de tu estado global.\r\n📢¡Sigue las instrucciones de los tests!📢\r\nREQUISITOS:\r\n🟢 Crea un caso default, que devuelva el estado global sin cambios.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se guarden todos los futbolistas.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistaDetail\", se guarde el detalle de un futbolista.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se agregue un nuevo futbolista.\r\n    [PISTA]: puedes utilizar el spread operator.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se elimine aquel futbolista cuyo ID es igual al recibido.\r\n\r\n*/\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // Acá va tu código:\n\n    case GET_ALL_FUTBOLISTAS:\n      return {\n        ...state,\n        futbolistas: action.payload\n      };\n    case GET_FUTBOLISTAS_DETAIL:\n      return {\n        ...state,\n        futbolistaDetail: action.payload\n      };\n    case CREATE_FUTBOLISTA:\n      return {\n        ...state,\n        futbolistas: [...state.futbolistas, action.payload]\n      };\n    case DELETE_FUTBOLISTA:\n      return {\n        ...state,\n        futbolistas: state.futbolistas.filter(futbolista => {\n          return futbolista.id !== action.payload;\n        })\n      };\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_ALL_FUTBOLISTAS","GET_FUTBOLISTAS_DETAIL","CREATE_FUTBOLISTA","DELETE_FUTBOLISTA","initialState","futbolistas","futbolistaDetail","rootReducer","state","arguments","length","undefined","action","type","payload","filter","futbolista","id"],"sources":["D:/Código/SoyHenry/FT-M2/CP-M2/prueba-git/src/redux/reducer/index.js"],"sourcesContent":["/* 4️⃣ ***REDUCER*** 4️⃣ */\r\n\r\n/* Importa las action-types aquí. */\r\n\r\nimport {GET_ALL_FUTBOLISTAS,GET_FUTBOLISTAS_DETAIL,CREATE_FUTBOLISTA,DELETE_FUTBOLISTA} from '../actions/index'\r\n\r\nconst initialState = {\r\n   futbolistas: [],\r\n   futbolistaDetail: {},\r\n};\r\n\r\n/*\r\nEn este ejercicio tendrás que crear los casos de un reducer para gestionar la información de tu estado global.\r\n📢¡Sigue las instrucciones de los tests!📢\r\nREQUISITOS:\r\n🟢 Crea un caso default, que devuelva el estado global sin cambios.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se guarden todos los futbolistas.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistaDetail\", se guarde el detalle de un futbolista.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se agregue un nuevo futbolista.\r\n    [PISTA]: puedes utilizar el spread operator.\r\n\r\n🟢 Crea un caso en el que, dentro del estado \"futbolistas\", se elimine aquel futbolista cuyo ID es igual al recibido.\r\n\r\n*/\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n   switch (action.type) {  // Acá va tu código:\r\n   \r\n      case GET_ALL_FUTBOLISTAS:\r\n         return {...state,futbolistas: action.payload}\r\n      \r\n      case GET_FUTBOLISTAS_DETAIL:\r\n         return {...state,futbolistaDetail: action.payload}\r\n\r\n      case CREATE_FUTBOLISTA:\r\n         return {...state, futbolistas: [...state.futbolistas,action.payload] }\r\n      \r\n      case DELETE_FUTBOLISTA:\r\n         return {...state, futbolistas: state.futbolistas.filter((futbolista) => {return futbolista.id !== action.payload})}\r\n\r\n      default:\r\n         return state\r\n   }\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":"AAAA;;AAEA;;AAEA,SAAQA,mBAAmB,EAACC,sBAAsB,EAACC,iBAAiB,EAACC,iBAAiB,QAAO,kBAAkB;AAE/G,MAAMC,YAAY,GAAG;EAClBC,WAAW,EAAE,EAAE;EACfC,gBAAgB,EAAE,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAEQ,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC9C,QAAQC,MAAM,CAACC,IAAI;IAAK;;IAErB,KAAKb,mBAAmB;MACrB,OAAO;QAAC,GAAGQ,KAAK;QAACH,WAAW,EAAEO,MAAM,CAACE;MAAO,CAAC;IAEhD,KAAKb,sBAAsB;MACxB,OAAO;QAAC,GAAGO,KAAK;QAACF,gBAAgB,EAAEM,MAAM,CAACE;MAAO,CAAC;IAErD,KAAKZ,iBAAiB;MACnB,OAAO;QAAC,GAAGM,KAAK;QAAEH,WAAW,EAAE,CAAC,GAAGG,KAAK,CAACH,WAAW,EAACO,MAAM,CAACE,OAAO;MAAE,CAAC;IAEzE,KAAKX,iBAAiB;MACnB,OAAO;QAAC,GAAGK,KAAK;QAAEH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,MAAM,CAAEC,UAAU,IAAK;UAAC,OAAOA,UAAU,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO;QAAA,CAAC;MAAC,CAAC;IAEtH;MACG,OAAON,KAAK;EAClB;AACH,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}